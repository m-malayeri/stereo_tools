<launch>
    <param name="use_sim_time" value="false" />

    <!-- Static transform from base_link to camera_link -->
    <!--<node pkg="tf" type="static_transform_publisher" name="world_to_map" args="0 0 0 0 0 0 world map 50"/> -->
    <node pkg="tf" type="static_transform_publisher" name="base_to_camera" args="0 0.15 0 -0.71 0 0 0.71 base_link camera_link 50" />
    <node pkg="tf" type="static_transform_publisher" name="camera_to_left_optical" args="-0.05 0 0 0 0 0 1 camera_link cam0 50" />
    <node pkg="tf" type="static_transform_publisher" name="camera_to_right_optical" args="0.05 0 0 0 0 0 1 camera_link cam1 50" />

    <node pkg="stereo_data_publisher" type="data_publisher_node" name="irs_data_publisher"/>    
        
    <!-- <node pkg="tf" type="static_transform_publisher" name="static_transform_publisher2" args="0.1 0 0 0 0 0 cam0 cam1 15"/> -->
    
    <!-- Stereo Odometry Node -->
    <node pkg="rtabmap_odom" type="stereo_odometry" name="stereo_odometry" output="screen">
        <remap from="left/image_rect" to="/stereo/left/image_raw" />
        <remap from="right/image_rect" to="/stereo/right/image_raw" />
        <remap from="left/camera_info" to="/stereo/left/camera_info" />
        <remap from="right/camera_info" to="/stereo/right/camera_info" />
        <param name="frame_id" value="base_link" />
        <param name="odom_frame_id" value="odom" />
        <param name="publish_tf" value="true" />
    </node>

    <node pkg="rtabmap_slam" type="rtabmap" name="rtabmap" output="screen">
        <param name="use_sim_time" value="false" />
        <remap from="odom" to="/stereo_odometry/odom" />
        <param name="subscribe_stereo" value="true"/>
        <param name="frame_id" value="base_link"/>  <!-- Camera frame -->
        <param name="odom_frame_id" value="odom"/>    <!-- Odometry frame -->
        <param name="map_frame_id" value="map"/>      <!-- Global map frame -->
        <param name="publish_tf_map_odom" value="true"/>
    </node>

    <node pkg="nodelet" type="nodelet" name="nodelet_manager" args="manager" />
    <node pkg="nodelet" type="nodelet" name="nodelet1" args="load stereo_image_proc/disparity nodelet_manager">
        <remap from="/left/image_rect" to="/stereo/left/image_raw"/>
        <remap from="/left/camera_info" to="/stereo/left/camera_info"/>
        <remap from="/right/image_rect" to="/stereo/right/image_raw"/>
        <remap from="/right/camera_info" to="/stereo/right/camera_info"/>
    </node>

    <node pkg="stereo_data_publisher" type="disparity_to_pointcloud_node" name="disparity_to_pointcloud_node" output="screen" />

    <arg name="env" default="virtual" doc="Define whether we are running on an actual robot or on a virtual replica" />
    <arg name="use_free_space_graph" default="false" doc="Define whether to use free space cluster graph" />
    <arg name="wait_odom_to_map_tf" default="false" />
    <arg name="april_tag_enabled" default="false" />
    <arg name="compute_odom" default="false" />

    <!-- Inputs -->
    <arg name="imu_data_topic" default="/platform/imu/data" />
    <arg name="point_cloud_topic" default="/stereo/pointcloud" /><!-- /platform/velodyne_points -->

    <!-- Outputs -->
    <arg name="slam_odometry_topic" default="/s_graphs/odom_to_map" />
    <arg name="slam_markers_topic" default="/s_graphs/markers" />
    <arg name="slam_map_points_topic" default="/s_graphs/map_points" />
    <arg name="base_link_frame" default="base_link" />

    <arg name="min_seg_points" default="100" />
    <arg name="min_horizontal_inliers" default="800" />
    <arg name="min_vertical_inliers" default="100" />

    <!-- PRE-FILTERING -->
    <node pkg="nodelet" type="nodelet" name="hdl_prefilter_nodelet_manager" args="manager" output="screen" />
    <node pkg="nodelet" type="nodelet" name="hdl_prefilter" args="load s_graphs/PrefilteringNodelet hdl_prefilter_nodelet_manager">
        <rosparam command="load" file="$(find s_graphs)/config/hdl_prefiltering.yaml" />
        <param name="base_link_frame" value="$(arg base_link_frame)" />
        <!-- Inputs -->
        <remap from="/imu/data" to="$(arg imu_data_topic)" />
        <remap from="/velodyne_points" to="$(arg point_cloud_topic)" />
        <!-- Outputs -->
        <remap from="/filtered_points" to="hdl_prefilter/filtered_point_cloud" />
        <remap from="/colored_points" to="hdl_prefilter/colored_point_cloud" />
    </node>

    <!-- SCAN MATCHING -->
    <node pkg="nodelet" type="nodelet" name="hdl_scan_matching_nodelet_manager" args="manager" output="screen" />
    <node if="$(arg compute_odom)" pkg="nodelet" type="nodelet" name="hdl_scan_matcher" args="load s_graphs/ScanMatchingOdometryNodelet hdl_scan_matching_nodelet_manager">
        <rosparam command="load" file="$(find s_graphs)/config/hdl_scan_matching.yaml" />
        <param name="publish_tf" value="true" />
        <!-- Inputs -->
        <remap from="/filtered_points" to="/hdl_prefilter/filtered_point_cloud" />
        <!-- Outputs -->
        <remap from="/odom" to="hdl_scan_matcher/odometry" />
        <remap from="/scan_matching_odometry/transform" to="hdl_scan_matcher/transform" />
        <remap from="/scan_matching_odometry/read_until" to="hdl_scan_matcher/read_until" />
        <remap from="/aligned_points" to="hdl_scan_matcher/aligned_points" />
        <remap from="/scan_matching_odometry/status" to="hdl_scan_matcher/status" />
    </node>


    <!--ROOM SEGMENTATION -->
    <node pkg="nodelet" type="nodelet" name="s_graphs_room_seg_nodelet_manager" args="manager" output="screen" />
    <node pkg="nodelet" type="nodelet" name="s_graphs_room_segmentor" args="load s_graphs/RoomSegmentationNodelet s_graphs_room_seg_nodelet_manager">
        <param name="vertex_neigh_thres" value="2" />
    </node>

    <!--FLOOR PLANNING -->
    <node pkg="nodelet" type="nodelet" name="s_graphs_floor_plan_nodelet_manager" args="manager" output="screen" />
    <node pkg="nodelet" type="nodelet" name="s_graphs_floor_planner" args="load s_graphs/FloorPlanNodelet s_graphs_floor_plan_nodelet_manager">
        <param name="vertex_neigh_thres" value="2" />
    </node>

    <!-- GRAPH SLAM -->
    <node pkg="nodelet" type="nodelet" name="s_graphs_nodelet_manager" args="manager" output="screen" />
    <node pkg="nodelet" type="nodelet" name="s_graphs" args="load s_graphs/SGraphsNodelet s_graphs_nodelet_manager" output="screen">
        <rosparam command="load" file="$(find s_graphs)/config/s_graphs.yaml" />
        <param if="$(arg wait_odom_to_map_tf)" name="wait_trans_odom2map" value="true" />
        <param unless="$(arg wait_odom_to_map_tf)" name="wait_trans_odom2map" value="false" />
        <param name="odom_frame_id" value="odom" />
        <param name="map_frame_id" value="map" />
        <param name="plane_extraction_frame_id" value="body" />
        <param name="plane_visualization_frame_id" value="body_elevated" />
        <param name="min_seg_points" value="$(arg min_seg_points)" />
        <param name="use_euclidean_filter" value="true" />
        <param name="use_shadow_filter" value="false" />
        <param name="min_horizontal_inliers" value="$(arg min_horizontal_inliers)" />
        <param name="min_vertical_inliers" value="$(arg min_vertical_inliers)" />
        <!-- Inputs -->
        <remap unless="$(arg compute_odom)" from="/odom" to="/platform/odometry"/>
        <remap if="$(arg compute_odom)" from="/odom" to="/hdl_scan_matcher/odometry" />
        <remap from="/filtered_points" to="/hdl_prefilter/filtered_point_cloud" />
        <remap from="/odom2map/initial_pose" to="/odom_to_map/initial_pose" />
        <!-- Outputs -->
        <remap from="/s_graphs/odom2map" to="$(arg slam_odometry_topic)" />
        <remap from="/s_graphs/markers" to="$(arg slam_markers_topic)" />
        <remap from="/s_graphs/map_points" to="$(arg slam_map_points_topic)" />
        <remap from="/s_graphs/read_until" to="s_graphs/read_until" />
    </node>

    <node pkg="s_graphs" name="map2odom_publisher" type="map2odom_publisher.py">
        <param name="odom_frame_id" value="odom" />
        <param name="map_frame_id" value="map" />
        <remap from="/s_graphs/odom2map" to="/s_graphs/odom_to_map" />
    </node>

    <node pkg="tf" type="static_transform_publisher" name="body_to_body_elevated" args="0 0 10.0 0 0 0 body body_elevated 100" />

    
    <!-- <node name="rviz" pkg="rviz" type="rviz" args="-d /home/cam2pcl.rviz" /> -->
    <node name="rviz" pkg="rviz" type="rviz" args="-d /root/s_graphs_ws/src/s_graphs/rviz/s_graphs.rviz" />

</launch>
